<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>CppCodeProvider</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualC.CodeDomTypeInfo">
      <summary>Kapselt Beschreibungen eines Typs.</summary>
    </member>
    <member name="M:Microsoft.VisualC.CodeDomTypeInfo.#ctor(Microsoft.VisualC.CodeDomTypeInfo)">
      <summary>Erstellt einen Container für Typinformationen anhand der angegebenen <see cref="T:Microsoft.VisualC.CodeDomTypeInfo" />.</summary>
      <param name="type">Eine Instanz eines <see cref="T:Microsoft.VisualC.CodeDomTypeInfo" />-Objekts, welches für Modelltypinformationen verwendet wird.</param>
    </member>
    <member name="M:Microsoft.VisualC.CodeDomTypeInfo.#ctor(Microsoft.VisualC.CodeDomTypeInfo,System.Int32)">
      <summary>Erstellt einen Container für Informationen über ein angegebenes Array anhand der angegebenen <see cref="T:Microsoft.VisualC.CodeDomTypeInfo" /> und <see cref="T:System.Int32" />.</summary>
      <param name="type">Eine Instanz eines <see cref="T:Microsoft.VisualC.CodeDomTypeInfo" />-Objekts, welches für Modelltypinformationen verwendet wird.</param>
      <param name="rank">Ein <see cref="T:System.Int32" />, das die Anzahl der Dimensionen des Arrays darstellt.</param>
    </member>
    <member name="M:Microsoft.VisualC.CodeDomTypeInfo.#ctor(System.CodeDom.CodeTypeDeclaration)">
      <summary>Erstellt einen Container für Typinformationen anhand der angegebenen <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
      <param name="declaredType">Eine <see cref="T:System.CodeDom.CodeTypeDeclaration" />, welche für Modelltypinformationen verwendet wird.</param>
    </member>
    <member name="M:Microsoft.VisualC.CodeDomTypeInfo.#ctor(System.Type)">
      <summary>Erstellt einen Container für Typinformationen anhand des angegebenen <see cref="T:System.Type" />.</summary>
      <param name="runtimeType">Ein <see cref="T:System.Type" />, welches für Modelltypinformationen verwendet wird.</param>
    </member>
    <member name="P:Microsoft.VisualC.CodeDomTypeInfo.DeclaredType">
      <summary>Ruft die Typdeklaration ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeDeclaration" />, welche eine Typdeklaration für eine Klasse, eine Struktur, eine Schnittstelle oder eine Enumeration darstellt.</returns>
    </member>
    <member name="P:Microsoft.VisualC.CodeDomTypeInfo.FullName">
      <summary>Ruft den vollqualifizierten Namen des Typs ab.</summary>
      <returns>Eine <see cref="T:System.String" />, die den vollqualifizierten Namen des Typs angibt.</returns>
    </member>
    <member name="M:Microsoft.VisualC.CodeDomTypeInfo.GetTypeRelationship(Microsoft.VisualC.CodeDomTypeInfo)">
      <summary>Erkennt die Beziehung zwischen zwei Typen.</summary>
      <returns>Eine <see cref="T:Microsoft.VisualC.TypeRelationship" />, die angibt, wie der aktuelle Typ mit dem angegebenen Typ verknüpft ist.</returns>
      <param name="type">
        <see cref="T:Microsoft.VisualC.CodeDomTypeInfo" />
      </param>
    </member>
    <member name="P:Microsoft.VisualC.CodeDomTypeInfo.IsArray">
      <summary>Ruft einen Wert ab, der angibt, ob die Typbeschreibung ein Array definiert.</summary>
      <returns>&quot;True&quot;, wenn die Typbeschreibung definiert, ist ein Array; andernfalls &quot;False&quot;.</returns>
    </member>
    <member name="P:Microsoft.VisualC.CodeDomTypeInfo.IsBaseTypeValueType"></member>
    <member name="P:Microsoft.VisualC.CodeDomTypeInfo.IsInterface">
      <summary>Ruft einen Wert ab, der angibt, ob die Typbeschreibung eine Arrayschnittstelle definiert.</summary>
      <returns>&quot;True&quot;, wenn die Typbeschreibung eine Schnittstelle definiert; andernfalls &quot;False&quot;.</returns>
    </member>
    <member name="P:Microsoft.VisualC.CodeDomTypeInfo.IsValueType">
      <summary>Ruft einen Wert ab, der angibt, ob die Typbeschreibung ist ein Werttyp definiert.</summary>
      <returns>&quot;True&quot;, wenn die Typbeschreibung einen Werttyp definiert; andernfalls &quot;False&quot;.</returns>
    </member>
    <member name="P:Microsoft.VisualC.CodeDomTypeInfo.Name">
      <summary>Ruft den Namen des Typs ab.</summary>
      <returns>Eine <see cref="T:System.String" />, die den Namen des Typs angibt.</returns>
    </member>
    <member name="P:Microsoft.VisualC.CodeDomTypeInfo.Rank">
      <summary>Ruft ab den Wert ab und legt ihn fest, der den Rang (Anzahl der Dimensionen) eines Arraytyps angibt.</summary>
      <returns>Eine <see cref="T:System.Int32" />, die den Rang (Anzahl der Dimensionen) eines Arraytyps angibt.</returns>
    </member>
    <member name="P:Microsoft.VisualC.CodeDomTypeInfo.RuntimeType">
      <summary>Ruft den tatsächlichen Typ des Objekts während der Laufzeit ab.</summary>
      <returns>Der <see cref="T:System.Type" /> des Objekts während der Laufzeit.</returns>
    </member>
    <member name="M:Microsoft.VisualC.CodeDomTypeInfo.ToString">
      <summary>Generiert eine Zeichenfolgendarstellung der Typinformationen.</summary>
      <returns>Eine <see cref="T:System.String" />, die den Typ beschreibt.</returns>
    </member>
    <member name="T:Microsoft.VisualC.CppCodeGenerator">
      <summary>Stellt eine Beispielimplementierung der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />-Schnittstelle und der <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGenerator.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualC.CppCodeGenerator" />-Klasse.</summary>
    </member>
    <member name="T:Microsoft.VisualC.CppCodeGenerator7">
      <summary>Stellt eine Beispielimplementierung der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGenerator7.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualC.CppCodeGenerator7" />-Klasse.</summary>
    </member>
    <member name="T:Microsoft.VisualC.CppCodeGeneratorBase"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.#ctor"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.CreateEscapedIdentifier(System.String)">
      <param name="name"></param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.CreateEscapedIdentifierInternal(System.String)">
      <param name="name"></param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.CreateValidIdentifier(System.String)">
      <param name="name"></param>
    </member>
    <member name="P:Microsoft.VisualC.CppCodeGeneratorBase.CurrentTypeString"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.Dispose"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.Dispose(System.Boolean)">
      <param name="disposing">Löschen.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <param name="e">Array erstelle Ausdruck</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateAttributes(System.CodeDom.CodeAttributeDeclarationCollection)">
      <param name="attributes">Attribute</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateAttributes(System.CodeDom.CodeAttributeDeclarationCollection,System.String)">
      <param name="attributes">Attribute</param>
      <param name="prefix">Präfix.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <param name="e">Cast-Ausdruck.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <param name="e">Kompilierungseinheit.</param>
      <param name="w">TextWriter.</param>
      <param name="o">Code-Generator-Optionen.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <param name="e">Ausdruck.</param>
      <param name="w">TextWriter.</param>
      <param name="o">Code-Generator-Optionen.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCodeFromField(System.CodeDom.CodeMemberField,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions,System.CodeDom.MemberAttributes)">
      <param name="e">Memberfeld.</param>
      <param name="w">TextWriter.</param>
      <param name="o">Code-Generator-Optionen.</param>
      <param name="maAmbient">Memberattribute.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <param name="e">Typmember.</param>
      <param name="w">TextWriter.</param>
      <param name="o">Code-Generator-Optionen.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCodeFromMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <param name="e">Membermethode.</param>
      <param name="c">Typdeklaration.</param>
      <param name="w">TextWriter.</param>
      <param name="o">Code-Generator-Optionen.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <param name="e">Namespace.</param>
      <param name="w">TextWriter.</param>
      <param name="o">Code-Generator-Optionen.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <param name="e">Anweisung.</param>
      <param name="w">TextWriter.</param>
      <param name="o">Code-Generator-Optionen.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <param name="e">Typdeklaration.</param>
      <param name="w">TextWriter.</param>
      <param name="o">Code-Generator-Optionen.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <param name="e">Comments.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod)">
      <param name="e">Einstiegspunktmethode.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateExpression(System.CodeDom.CodeExpression)">
      <param name="e">Ausdruck.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <param name="e">Zeilenpragma.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <param name="e">Zeilenpragma.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <param name="e">Methodenaufrufsausdruck.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <param name="e">Methodenverweisausdruck.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GeneratePossibleBoxExpression(Microsoft.VisualC.CodeDomTypeInfo,System.CodeDom.CodeExpression)">
      <param name="typeLeft">Typ.</param>
      <param name="right">Ausdruck.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GeneratePossibleBoxExpression(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <param name="left">Linker Ausdruck.</param>
      <param name="right">Rechter Ausdruck.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateProperty(System.CodeDom.CodeMemberProperty)">
      <param name="e">Membereigenschaft.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <param name="s">Anweisungen.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <param name="e">TypeOf-Ausdruck.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GetBaseTypeOutput(System.CodeDom.CodeTypeReference)">
      <param name="typeRef">Typverweis.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GetBaseTypeReference(System.CodeDom.CodeTypeReference)">
      <param name="typeRef">Typverweis.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GetClassNameOutput(System.String)">
      <param name="s">Eine Zeichenfolge.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GetNewTempName"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <param name="typeRef">Typverweis.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GetTypeOutputInternal(System.CodeDom.CodeTypeReference)">
      <param name="typeRef">Typverweis.</param>
    </member>
    <member name="P:Microsoft.VisualC.CppCodeGeneratorBase.Indent"></member>
    <member name="P:Microsoft.VisualC.CppCodeGeneratorBase.IsCurrentInterface"></member>
    <member name="P:Microsoft.VisualC.CppCodeGeneratorBase.IsInline"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.IsValidIdentifier(System.String)">
      <param name="value">Eine Zeichenfolge.</param>
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.m_entrypoint"></member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.m_keywords"></member>
    <member name="P:Microsoft.VisualC.CppCodeGeneratorBase.NullToken"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputArrayPostfix(System.Int32)">
      <param name="arrayRank">Arrayrang.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <param name="attributes">Attributdeklarationen.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection,System.Boolean)">
      <param name="attributes">Attributdeklarationen.</param>
      <param name="isProperty">Ist-Eigenschaft.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputClassHead(System.CodeDom.CodeTypeDeclaration)">
      <param name="e">Typdeklaration.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputClassHeadForwardDeclaration(System.CodeDom.CodeTypeDeclaration)">
      <param name="e">Typdeklaration.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputEventScopeModifier(System.CodeDom.MemberAttributes)">
      <param name="attributes">Attribute</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputFunctionModifiers(System.CodeDom.MemberAttributes)">
      <param name="attributes">Attribute</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputIdentifier(System.String)">
      <param name="s">Bezeichner.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputIndexerParameterList(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <param name="parameters">Parameter</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputKeyword(Microsoft.VisualC.CppCodeGeneratorBase.EKeyword)">
      <param name="e">Schlüsselwort.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <param name="attributes">Attribute</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <param name="attributes">Attribute</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <param name="parameters">Parameter</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputStartingBrace"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputStatementsBlock(System.CodeDom.CodeStatementCollection)">
      <param name="statements">Anweisungen.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputType(System.CodeDom.CodeTypeReference)">
      <param name="typeRef">Typverweis.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputType(System.CodeDom.CodeTypeReference,Microsoft.VisualC.CodeDomTypeInfo)">
      <param name="typeRef">Typverweis.</param>
      <param name="typeInfo">Typinformationen.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputTypeArguments(System.CodeDom.CodeTypeReferenceCollection)">
      <param name="types">Typen.</param>
    </member>
    <member name="P:Microsoft.VisualC.CppCodeGeneratorBase.PassNumber"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.PopOutputStreams"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.PopulateKeywords"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.ProcessPossibleGlobalTypeName(System.String)">
      <param name="t">Typname.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.PushOutputStreams"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.QuoteSnippetString(System.String)">
      <param name="value">Ausschnittszeichenfolge.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.QuoteSnippetStringCStyle(System.String)">
      <param name="value">Ausschnittszeichenfolge.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.ResetSymTabStack"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.SmartLineBreak"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <param name="support">Unterstützung.</param>
    </member>
    <member name="P:Microsoft.VisualC.CppCodeGeneratorBase.SymTabStack"></member>
    <member name="P:Microsoft.VisualC.CppCodeGeneratorBase.TempSuffix"></member>
    <member name="P:Microsoft.VisualC.CppCodeGeneratorBase.TypeResolutionService"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.ValidateIdentifier(System.String)">
      <param name="value">Bezeichner.</param>
    </member>
    <member name="T:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword"></member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.GC">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.NEW">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.POINTER">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.VALUE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.SEALED">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.ABSTRACT">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.DELEGATE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.EVENT">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.TYPEOF">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.INTERFACE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.FINALLY">
      <summary />
    </member>
    <member name="T:Microsoft.VisualC.CppCodeProvider">
      <summary>Stellt eine Basisklasse für eine C/C++-Implementierung von <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> bereit.</summary>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeProvider.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualC.CppCodeProvider" />-Klasse.</summary>
    </member>
    <member name="P:Microsoft.VisualC.CppCodeProvider.CompileUnit">
      <summary>Ruft ein C++-Programmdiagramm ab und legt dieses fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeCompileUnit" />, die ein C++-Programmdiagramm darstellt.</returns>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeProvider.CreateCompiler">
      <summary>Erstellt eine Instanz des C++-Codecompilers.</summary>
      <returns>Ein <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />, der zum Kompilieren von <see cref="N:System.CodeDom" />-basierten C++-Quellcodedarstellungen verwendet werden kann.</returns>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeProvider.CreateGenerator">
      <summary>Erstellt eine Instanz eines C++-Code Generators.</summary>
      <returns>Ein <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />, der zum Generieren von <see cref="N:System.CodeDom" />-basierten C++-Quellcodedarstellungen verwendet werden kann.</returns>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeProvider.CreateParser">
      <summary>Nicht implementiert.</summary>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="P:Microsoft.VisualC.CppCodeProvider.FileExtension">
      <summary>Ruft die Dateinamenerweiterung für C++-Quellcodedateien ab.</summary>
      <returns>Eine <see cref="T:System.String" />, welche die Dateinamenerweiterung für C++-Quellcodedateien darstellt.</returns>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)"></member>
    <member name="T:Microsoft.VisualC.CppCodeProvider7"></member>
    <member name="M:Microsoft.VisualC.CppCodeProvider7.#ctor"></member>
    <member name="M:Microsoft.VisualC.CppCodeProvider7.CreateGenerator"></member>
    <member name="T:Microsoft.VisualC.SymbolTableStack">
      <summary>Stellt eine einfache nicht generische LIFO (Last-In-First-Out)-Auflistung von C++-CodeDOM (Code Document Object Model)-Objekten dar.</summary>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.#ctor(System.CodeDom.CodeObject)">
      <param name="tree">
        <see cref="T:System.CodeDom.CodeObject" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.Add(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <param name="arguments">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.Add(System.CodeDom.CodeStatementCollection)">
      <param name="statements">
        <see cref="T:System.CodeDom.CodeStatementCollection" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.Add(System.String,Microsoft.VisualC.CodeDomTypeInfo)">
      <param name="id"></param>
      <param name="type">CodeDomTypeInfo</param>
    </member>
    <member name="P:Microsoft.VisualC.SymbolTableStack.CurrentType"></member>
    <member name="P:Microsoft.VisualC.SymbolTableStack.CurrentTypeInfo"></member>
    <member name="P:Microsoft.VisualC.SymbolTableStack.Errors"></member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.EvaluateIndexer(System.CodeDom.CodeIndexerExpression)">
      <param name="e">
        <see cref="T:System.CodeDom.CodeIndexerExpression" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.EvaluateMethod(Microsoft.VisualC.CodeDomTypeInfo,System.String)">
      <param name="targetInfo">CodeDomTypeInfo</param>
      <param name="methodName">
        <see cref="T:System.String" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.EvaluateMethod(Microsoft.VisualC.CodeDomTypeInfo,System.String,System.Int32)">
      <param name="targetInfo">CodeDomTypeInfo</param>
      <param name="methodName">
        <see cref="T:System.String" />
      </param>
      <param name="paramCount"></param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.EvaluateMethod(System.CodeDom.CodeMethodInvokeExpression)">
      <param name="e">
        <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.EvaluateProperty(System.CodeDom.CodePropertyReferenceExpression)">
      <param name="e">
        <see cref="T:System.CodeDom.CodePropertyReferenceExpression" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.EvaluateType(System.CodeDom.CodeExpression)">
      <param name="e">
        <see cref="T:System.CodeDom.CodeExpression" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.EvaluateType(System.CodeDom.CodeTypeReference)">
      <param name="e">
        <see cref="T:System.CodeDom.CodeTypeReference" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.ExitScope"></member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.GetTypeFromName(System.String)"></member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.SetCurrentType(System.CodeDom.CodeNamespace)">
      <param name="ns">
        <see cref="T:System.CodeDom.CodeNamespace" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.SetCurrentType(System.CodeDom.CodeTypeDeclaration)">
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.SetScope"></member>
    <member name="P:Microsoft.VisualC.SymbolTableStack.TypeResolutionService"></member>
    <member name="P:Microsoft.VisualC.SymbolTableStack.Warnings"></member>
    <member name="T:Microsoft.VisualC.TypeRelationship"></member>
    <member name="F:Microsoft.VisualC.TypeRelationship.Unknown">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.TypeRelationship.DerivedFrom">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.TypeRelationship.SameType">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.TypeRelationship.MaybeBoxNeeded">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.TypeRelationship.BoxNeeded">
      <summary />
    </member>
  </members>
</doc>